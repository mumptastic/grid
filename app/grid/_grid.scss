@use 'sass:map';
@use 'sass:math';
@use 'breakpoints' as *;

$grid-columns: 12;
$gutter-x: 1.5rem;
$gutter-y: 0;


.container,
.container-fluid,
.container-xxl,
.container-xl,
.container-lg,
.container-md,
.container-sm {
    padding-right: calc(#{$gutter-x} * 0.5);
    padding-left: calc(#{$gutter-x} * 0.5);
    margin-right: auto;
    margin-left: auto;
  }


@include sm {
    .container-sm, .container {
        max-width: 540px;
    }
}

@include md {
    .container-md, .container-sm, .container {
        max-width: 720px;
    }
}

@include lg {
    .container-lg, .container-md, .container-sm, .container {
        max-width: 960px;
    }
}

@include xl {
    .container-xl, .container-lg, .container-md, .container-sm, .container {
        max-width: 1140px;
    }
}

@include xxl {
    .container-xxl, .container-xl, .container-lg, .container-md, .container-sm, .container {
        max-width: 1320px;
    }
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: calc(-0.5 * $gutter-x);
    margin-left: calc(-0.5 * $gutter-x);
  }

.row > * {
    box-sizing: border-box;
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    padding-right: calc(#{$gutter-x} * 0.5);
    padding-left: calc(#{$gutter-x} * 0.5);
    margin-top: #{$gutter-y};
}

.col { 
    flex: 1 0 0%; 
    margin: 1rem;
}
.row-cols-auto > * { 
    flex: 0 0 auto; 
    width: auto; 
}

@for $i from 1 through 6 {
    .row-cols-#{$i} > * {
        flex: 0 0 auto;
        width: calc((100 / $i)*1%);
    }
}

.col-auto {
    flex: 0 0 auto;
    width: auto;
  }

@for $i from 1 through $grid-columns {
    .col-#{$i} {
        flex: 0 0 auto;
        width: calc($i*100% / $grid-columns);
        // margin: 1rem;
    }

    .offset-#{$i} {
        margin-left: calc($i*100% / $grid-columns)
    }
}

@include sm {
    .col-sm {
        flex: 1 0 0%;
    }

    .row-cols-sm-auto > * {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through 6 {
        .row-cols-sm-#{$i} > * {
            flex: 0 0 auto;
            width: calc((100 / $i)*1%);
        }
    }

    .col-sm-auto {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            flex: 0 0 auto;
            .col-sm-#{$i} {
                flex: 0 0 auto;
                width: calc(($i*100% / $grid-columns) - 0.5rem);
                margin: 0.25rem;
            }
        }

        .offset-sm-#{$i} {
            margin-left: calc($i*100% / $grid-columns)
        }
    }

}

@include md {
    .col-md {
        flex: 1 0 0%;
    }

    .row-cols-md-auto > * {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through 6 {
        .row-cols-md-#{$i} > * {
            flex: 0 0 auto;
            width: calc((100 / $i)*1%);
        }
    }

    .col-md-auto {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .col-md-#{$i} {
            flex: 0 0 auto;
            width: calc(($i*100% / $grid-columns) - 1rem);
            margin: 0.5rem;
        }

        .offset-md-#{$i} {
            margin-left: calc($i*100% / $grid-columns)
        }
    }

}

@include lg {
    .col-lg {
        flex: 1 0 0%;
    }

    .row-cols-lg-auto > * {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through 6 {
        .row-cols-lg-#{$i} > * {
            flex: 0 0 auto;
            width: calc((100 / $i)*1%);
        }
    }

    .col-md-auto {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            flex: 0 0 auto;
            width: calc($i*100% / $grid-columns)
        }

        .offset-lg-#{$i} {
            margin-left: calc($i*100% / $grid-columns)
        }
    }

}

@include xl {
    .col-xl {
        flex: 1 0 0%;
    }

    .row-cols-xl-auto > * {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through 6 {
        .row-cols-xl-#{$i} > * {
            flex: 0 0 auto;
            width: calc((100 / $i)*1%);
        }
    }

    .col-xl-auto {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .col-xl-#{$i} {
            flex: 0 0 auto;
            width: calc($i*100% / $grid-columns)
        }

        .offset-xl-#{$i} {
            margin-left: calc($i*100% / $grid-columns)
        }
    }

}

@include xxl {
    .col-xxl {
        flex: 1 0 0%;
    }

    .row-cols-xxl-auto > * {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through 6 {
        .row-cols-xxl-#{$i} > * {
            flex: 0 0 auto;
            width: calc((100 / $i)*1%);
        }
    }

    .col-xxl-auto {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .col-xxl-#{$i} {
            flex: 0 0 auto;
            width: calc($i*100% / $grid-columns)
        }

        .offset-xxl-#{$i} {
            margin-left: calc($i*100% / $grid-columns)
        }
    }

}

.d-inline { display: inline; }
.d-inline-block { display: inline-block; }
.d-block { display: block; }
.d-none { display: none; }

.d-table { display: table; }
.d-table-row { display: table-row; }
.d-table-cell { display: table-cell; }

.d-grid { display: grid; }

/* FLEXBOX UTILS */
.d-flex { display: flex; }
.d-inline-flex { display: inline-flex; }
.flex-fill { flex: 1 1 auto; }
.flex-row { flex-direction: row; }
.flex-column { flex-direction: column; }
.flex-row-reverse { flex-direction: row-reverse; }
.flex-grow-0 { flex-grow: 0; }
.flex-grow-1 { flex-grow: 1; }
.flex-shrink-0 { flex-shrink: 0; }
.flex-shrink-1 { flex-shrink: 1; }
.flex-wrap { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }
.flex-wrap-reverse { flex-wrap: wrap-reverse; }

.justify-content-start { justify-content: start; }
.justify-content-end { justify-content: end; }
.justify-content-center { justify-content: center; }
.justify-content-between { justify-content: space-between; }
.justify-content-around { justify-content: space-around; }
.justify-content-evenly { justify-content: space-evenly; }

